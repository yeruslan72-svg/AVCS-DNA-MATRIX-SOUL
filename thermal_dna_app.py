# thermal_dna_app.py - –£–õ–¨–¢–†–ê-–ú–ò–ù–ò–ú–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø –í–ï–†–°–ò–Ø
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Thermal DNA", layout="wide")

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.title("üå°Ô∏è Thermal DNA Simulator")
st.markdown("**Real-time thermal monitoring for FPSO equipment**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "running" not in st.session_state:
    st.session_state.running = False
if "temps" not in st.session_state:
    st.session_state.temps = []
if "cycle" not in st.session_state:
    st.session_state.cycle = 0

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
col1, col2 = st.columns(2)
with col1:
    if st.button("‚ñ∂Ô∏è Start Simulation", type="primary"):
        st.session_state.running = True
        st.session_state.temps = []
        st.session_state.cycle = 0
        
with col2:
    if st.button("‚èπÔ∏è Stop Simulation"):
        st.session_state.running = False

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏
if st.session_state.running:
    placeholder = st.empty()
    
    for cycle in range(50):
        if not st.session_state.running:
            break
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if cycle < 20:
            temp = 55 + np.random.normal(0, 2)
        elif cycle < 40:
            temp = 70 + np.random.normal(0, 3)
        else:
            temp = 90 + np.random.normal(0, 4)
            
        st.session_state.temps.append(temp)
        st.session_state.cycle = cycle
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        with placeholder.container():
            fig, ax = plt.subplots(figsize=(10, 4))
            ax.plot(st.session_state.temps, 'r-', linewidth=2, marker='o')
            ax.set_ylim(40, 120)
            ax.set_xlabel("Cycle")
            ax.set_ylabel("Temperature (¬∞C)")
            ax.set_title(f"Thermal DNA Monitoring - Cycle {cycle}")
            
            # –ó–æ–Ω—ã —Ä–∏—Å–∫–∞
            ax.axhspan(40, 60, color='green', alpha=0.2, label='Normal')
            ax.axhspan(61, 80, color='orange', alpha=0.2, label='Warning')
            ax.axhspan(81, 120, color='red', alpha=0.2, label='Critical')
            ax.legend()
            
            st.pyplot(fig)
            
            # –°—Ç–∞—Ç—É—Å
            if temp > 80:
                st.error(f"üö® CRITICAL: {temp:.1f}¬∞C - Immediate maintenance required!")
            elif temp > 60:
                st.warning(f"‚ö†Ô∏è WARNING: {temp:.1f}¬∞C - Monitor closely")
            else:
                st.success(f"‚úÖ NORMAL: {temp:.1f}¬∞C")
                
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            st.progress((cycle + 1) / 50)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("System Info")
st.sidebar.write("**Thermal DNA** - Predictive maintenance")
st.sidebar.write("**Sensors:** 8 thermal sensors")
st.sidebar.write("**Sampling:** 1 Hz")
st.sidebar.write("**AI Analysis:** Real-time anomaly detection")

st.markdown("---")
st.caption("Thermal DNA Simulator v1.0 | Industrial Monitoring System")
