# streamlit_app.py - AVCS DNA Industrial Monitor (WITH CHARTS)
import streamlit as st
import numpy as np
import pandas as pd
import time

# –£–ë–ò–†–ê–ï–ú set_page_config –ø–æ–ª–Ω–æ—Å—Ç—å—é
# st.set_page_config(page_title="AVCS DNA Monitor", layout="wide")

st.title("üè≠ AVCS DNA Industrial Monitor")
st.write("AI-Powered Predictive Maintenance System")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å DataFrame
if "system_running" not in st.session_state:
    st.session_state.system_running = False
if "vibration_data" not in st.session_state:
    st.session_state.vibration_data = pd.DataFrame(columns=['Motor Drive', 'Motor Non-Drive', 'Pump Inlet', 'Pump Outlet'])
if "temperature_data" not in st.session_state:
    st.session_state.temperature_data = pd.DataFrame(columns=['Motor Winding', 'Motor Bearing', 'Pump Bearing', 'Pump Casing'])
if "current_cycle" not in st.session_state:
    st.session_state.current_cycle = 0

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
st.sidebar.header("Control Panel")

if st.sidebar.button("‚ö° Start Monitoring"):
    st.session_state.system_running = True
    st.session_state.vibration_data = pd.DataFrame(columns=['Motor Drive', 'Motor Non-Drive', 'Pump Inlet', 'Pump Outlet'])
    st.session_state.temperature_data = pd.DataFrame(columns=['Motor Winding', 'Motor Bearing', 'Pump Bearing', 'Pump Casing'])
    st.session_state.current_cycle = 0
    st.rerun()

if st.sidebar.button("üõë Stop Monitoring"):
    st.session_state.system_running = False
    st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if not st.session_state.system_running:
    st.info("Click 'Start Monitoring' to begin real-time monitoring")
else:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 4 —Å–µ–Ω—Å–æ—Ä–æ–≤
    cycle = st.session_state.current_cycle
    
    if cycle < 30:
        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        base_vib = 1.0
        base_temp = 65
        status = "üü¢ NORMAL"
    elif cycle < 60:
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        base_vib = 3.0
        base_temp = 75
        status = "üü° WARNING"
    else:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        base_vib = 6.0
        base_temp = 90
        status = "üî¥ CRITICAL"
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è 4 –≤–∏–±—Ä–æ-—Å–µ–Ω—Å–æ—Ä–æ–≤
    vibration_data = {
        'Motor Drive': max(0.1, base_vib + np.random.normal(0, 0.2)),
        'Motor Non-Drive': max(0.1, base_vib + np.random.normal(0, 0.3)),
        'Pump Inlet': max(0.1, base_vib + np.random.normal(0, 0.25)),
        'Pump Outlet': max(0.1, base_vib + np.random.normal(0, 0.35))
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è 4 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
    temperature_data = {
        'Motor Winding': max(20, base_temp + np.random.normal(0, 3)),
        'Motor Bearing': max(20, base_temp + np.random.normal(0, 4)),
        'Pump Bearing': max(20, base_temp + np.random.normal(0, 5)),
        'Pump Casing': max(20, base_temp + np.random.normal(0, 2))
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    st.session_state.vibration_data = pd.concat([
        st.session_state.vibration_data, 
        pd.DataFrame([vibration_data])
    ], ignore_index=True)
    
    st.session_state.temperature_data = pd.concat([
        st.session_state.temperature_data,
        pd.DataFrame([temperature_data])
    ], ignore_index=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç–æ—á–µ–∫)
    if len(st.session_state.vibration_data) > 50:
        st.session_state.vibration_data = st.session_state.vibration_data.iloc[1:]
    if len(st.session_state.temperature_data) > 50:
        st.session_state.temperature_data = st.session_state.temperature_data.iloc[1:]
    
    # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ì–†–ê–§–ò–ö–û–í
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Vibration Sensors")
        if not st.session_state.vibration_data.empty:
            st.line_chart(st.session_state.vibration_data, height=300)
        
        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏
        st.write("**Current Vibration Values:**")
        for sensor, value in vibration_data.items():
            st.write(f"{sensor}: {value:.2f} mm/s")
    
    with col2:
        st.subheader("üå°Ô∏è Temperature Sensors")
        if not st.session_state.temperature_data.empty:
            st.line_chart(st.session_state.temperature_data, height=300)
        
        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        st.write("**Current Temperature Values:**")
        for sensor, value in temperature_data.items():
            st.write(f"{sensor}: {value:.1f} ¬∞C")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    st.subheader("üö® System Status")
    if status == "üî¥ CRITICAL":
        st.error(f"{status} - Immediate maintenance required!")
    elif status == "üü° WARNING":
        st.warning(f"{status} - Monitor equipment closely")
    else:
        st.success(f"{status} - Operating normally")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.sidebar.write(f"**Cycle:** {st.session_state.current_cycle}/100")
    progress = st.session_state.current_cycle / 100
    st.sidebar.progress(progress)
    
    # –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
    st.session_state.current_cycle += 1
    
    if st.session_state.current_cycle >= 100:
        st.balloons()
        st.success("‚úÖ Monitoring session completed successfully!")
        st.session_state.system_running = False
    else:
        time.sleep(1)
        st.rerun()

st.write("---")
st.caption("AVCS DNA Matrix Soul v6.0 | Yeruslan Technologies | Predictive Maintenance System")
